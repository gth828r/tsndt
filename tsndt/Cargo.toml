[package]
name = "tsndt"
version = "0.1.0"
authors = ["Tim Upthegrove <tim.upthegrove@gmail.com>"]
license = "MIT"
edition = "2021"

[dependencies]
tsndt-common = { path = "../tsndt-common", features = ["user"] }
aya = { workspace = true }
aya-log = { workspace = true }
env_logger = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "net", "time", "signal"] }
clap = { workspace = true, features = ["derive"] }
anyhow.workspace = true
network-interface = "2.0.1"
color-eyre = "0.6.3"
crossterm = "0.29.0"
ratatui = "0.29.0"
tracing = "0.1.41"
directories = "6.0.0"
lazy_static = "1.5.0"
tracing-error = "0.2.1"
tracing-subscriber = { version = "0.3.19", features = ["env-filter"] }
env_filter = "0.1.3"


[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependency so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
tsndt-ebpf = { path = "../tsndt-ebpf" }

[[bin]]
name = "tsndt"
path = "src/main.rs"
